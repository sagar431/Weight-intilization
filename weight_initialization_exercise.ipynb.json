{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Weight Initialization\n",
    "In this lesson, you'll learn how to find good initial weights for a neural network. Weight initialization happens once, when a model is created and before it trains. Having good initial weights can place the neural network close to the optimal solution. This allows the neural network to come to the best solution quicker. \n",
    "\n",
    "<img src=\"notebook_ims/neuron_weights.png\" width=40%/>\n",
    "\n",
    "\n",
    "## Initial Weights and Observing Training Loss\n",
    "\n",
    "To see how different weights perform, we'll test on the same dataset and neural network. That way, we know that any changes in model behavior are due to the weights and not any changing data or model structure. \n",
    "> We'll instantiate at least two of the same models, with _different_ initial weights and see how the training loss decreases over time, such as in the example below. \n",
    "\n",
    "<img src=\"notebook_ims/loss_comparison_ex.png\" width=60%/>\n",
    "\n",
    "Sometimes the differences in training loss, over time, will be large and other times, certain weights offer only small improvements.\n",
    "\n",
    "### Dataset and Model\n",
    "\n",
    "We'll train an MLP to classify images from the [Fashion-MNIST database](https://github.com/zalandoresearch/fashion-mnist) to demonstrate the effect of different initial weights. As a reminder, the FashionMNIST dataset contains images of clothing types; `classes = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']`. The images are normalized so that their pixel values are in a range [0.0 - 1.0).  Run the cell below to download and load the dataset.\n",
    "\n",
    "---\n",
    "#### EXERCISE\n",
    "\n",
    "[Link to normalized distribution, exercise code](#normalex)\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Libraries and Load [Data](http://pytorch.org/docs/stable/torchvision/datasets.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\n",
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\n",
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\n",
      "Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\n",
      "Processing...\n",
      "Done!\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "from torchvision import datasets\n",
    "import torchvision.transforms as transforms\n",
    "from torch.utils.data.sampler import SubsetRandomSampler\n",
    "\n",
    "# number of subprocesses to use for data loading\n",
    "num_workers = 0\n",
    "# how many samples per batch to load\n",
    "batch_size = 100\n",
    "# percentage of training set to use as validation\n",
    "valid_size = 0.2\n",
    "\n",
    "# convert data to torch.FloatTensor\n",
    "transform = transforms.ToTensor()\n",
    "\n",
    "# choose the training and test datasets\n",
    "train_data = datasets.FashionMNIST(root='data', train=True,\n",
    "                                   download=True, transform=transform)\n",
    "test_data = datasets.FashionMNIST(root='data', train=False,\n",
    "                                  download=True, transform=transform)\n",
    "\n",
    "# obtain training indices that will be used for validation\n",
    "num_train = len(train_data)\n",
    "indices = list(range(num_train))\n",
    "np.random.shuffle(indices)\n",
    "split = int(np.floor(valid_size * num_train))\n",
    "train_idx, valid_idx = indices[split:], indices[:split]\n",
    "\n",
    "# define samplers for obtaining training and validation batches\n",
    "train_sampler = SubsetRandomSampler(train_idx)\n",
    "valid_sampler = SubsetRandomSampler(valid_idx)\n",
    "\n",
    "# prepare data loaders (combine dataset and sampler)\n",
    "train_loader = torch.utils.data.DataLoader(train_data, batch_size=batch_size,\n",
    "    sampler=train_sampler, num_workers=num_workers)\n",
    "valid_loader = torch.utils.data.DataLoader(train_data, batch_size=batch_size, \n",
    "    sampler=valid_sampler, num_workers=num_workers)\n",
    "test_loader = torch.utils.data.DataLoader(test_data, batch_size=batch_size, \n",
    "    num_workers=num_workers)\n",
    "\n",
    "# specify the image classes\n",
    "classes = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n",
    "    'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize Some Training Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f43d4036080>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "    \n",
    "# obtain one batch of training images\n",
    "dataiter = iter(train_loader)\n",
    "images, labels = dataiter.next()\n",
    "images = images.numpy()\n",
    "\n",
    "# plot the images in the batch, along with the corresponding labels\n",
    "fig = plt.figure(figsize=(25, 4))\n",
    "for idx in np.arange(20):\n",
    "    ax = fig.add_subplot(2, 20/2, idx+1, xticks=[], yticks=[])\n",
    "    ax.imshow(np.squeeze(images[idx]), cmap='gray')\n",
    "    ax.set_title(classes[labels[idx]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the Model Architecture\n",
    "\n",
    "We've defined the MLP that we'll use for classifying the dataset.\n",
    "\n",
    "### Neural Network\n",
    "<img style=\"float: left\" src=\"notebook_ims/neural_net.png\" width=50%/>\n",
    "\n",
    "\n",
    "* A 3 layer MLP with hidden dimensions of 256 and 128. \n",
    "\n",
    "* This MLP accepts a flattened image (784-value long vector) as input and produces 10 class scores as output.\n",
    "---\n",
    "We'll test the effect of different initial weights on this 3 layer neural network with ReLU activations and an Adam optimizer.  \n",
    "\n",
    "The lessons you learn apply to other neural networks, including different activations and optimizers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Initialize Weights\n",
    "Let's start looking at some initial weights.\n",
    "### All Zeros or Ones\n",
    "If you follow the principle of [Occam's razor](https://en.wikipedia.org/wiki/Occam's_razor), you might think setting all the weights to 0 or 1 would be the best solution.  This is not the case.\n",
    "\n",
    "With every weight the same, all the neurons at each layer are producing the same output.  This makes it hard to decide which weights to adjust.\n",
    "\n",
    "Let's compare the loss with all ones and all zero weights by defining two models with those constant weights.\n",
    "\n",
    "Below, we are using PyTorch's [nn.init](https://pytorch.org/docs/stable/nn.html#torch-nn-init) to initialize each Linear layer with a constant weight. The init library provides a number of weight initialization functions that give you the ability to initialize the weights of each layer according to layer type.\n",
    "\n",
    "In the case below, we look at every layer/module in our model. If it is a Linear layer (as all three layers are for this MLP), then we initialize those layer weights to be a `constant_weight` with bias=0 using the following code:\n",
    ">```\n",
    "if isinstance(m, nn.Linear):\n",
    "    nn.init.constant_(m.weight, constant_weight)\n",
    "    nn.init.constant_(m.bias, 0)\n",
    "```\n",
    "\n",
    "The `constant_weight` is a value that you can pass in when you instantiate the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "# define the NN architecture\n",
    "class Net(nn.Module):\n",
    "    def __init__(self, hidden_1=256, hidden_2=128, constant_weight=None):\n",
    "        super(Net, self).__init__()\n",
    "        # linear layer (784 -> hidden_1)\n",
    "        self.fc1 = nn.Linear(28 * 28, hidden_1)\n",
    "        # linear layer (hidden_1 -> hidden_2)\n",
    "        self.fc2 = nn.Linear(hidden_1, hidden_2)\n",
    "        # linear layer (hidden_2 -> 10)\n",
    "        self.fc3 = nn.Linear(hidden_2, 10)\n",
    "        # dropout layer (p=0.2)\n",
    "        self.dropout = nn.Dropout(0.2)\n",
    "        \n",
    "        # initialize the weights to a specified, constant value\n",
    "        if(constant_weight is not None):\n",
    "            for m in self.modules():\n",
    "                if isinstance(m, nn.Linear):\n",
    "                    nn.init.constant_(m.weight, constant_weight)\n",
    "                    nn.init.constant_(m.bias, 0)\n",
    "    \n",
    "            \n",
    "    def forward(self, x):\n",
    "        # flatten image input\n",
    "        x = x.view(-1, 28 * 28)\n",
    "        # add hidden layer, with relu activation function\n",
    "        x = F.relu(self.fc1(x))\n",
    "        # add dropout layer\n",
    "        x = self.dropout(x)\n",
    "        # add hidden layer, with relu activation function\n",
    "        x = F.relu(self.fc2(x))\n",
    "        # add dropout layer\n",
    "        x = self.dropout(x)\n",
    "        # add output layer\n",
    "        x = self.fc3(x)\n",
    "        return x\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compare Model Behavior\n",
    "\n",
    "Below, we are using `helpers.compare_init_weights` to compare the training and validation loss for the two models we defined above, `model_0` and `model_1`.  This function takes in a list of models (each with different initial weights), the name of the plot to produce, and the training and validation dataset loaders. For each given model, it will plot the training loss for the first 100 batches and print out the validation accuracy after 2 training epochs. *Note: if you've used a small batch_size, you may want to increase the number of epochs here to better compare how models behave after seeing a few hundred images.* \n",
    "\n",
    "We plot the loss over the first 100 batches to better judge which model weights performed better at the start of training. **I recommend that you take a look at the code in `helpers.py` to look at the details behind how the models are trained, validated, and compared.**\n",
    "\n",
    "Run the cell below to see the difference between weights of all zeros against all ones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# initialize two NN's with 0 and 1 constant weights\n",
    "model_0 = Net(constant_weight=0)\n",
    "model_1 = Net(constant_weight=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f43793ac4a8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After 2 Epochs:\n",
      "Validation Accuracy\n",
      "    9.875% -- All Zeros\n",
      "   10.117% -- All Ones\n",
      "Training Loss\n",
      "    2.303  -- All Zeros\n",
      "  640.994  -- All Ones\n"
     ]
    }
   ],
   "source": [
    "import helpers\n",
    "\n",
    "# put them in list form to compare\n",
    "model_list = [(model_0, 'All Zeros'),\n",
    "              (model_1, 'All Ones')]\n",
    "\n",
    "\n",
    "# plot the loss over the first 100 batches\n",
    "helpers.compare_init_weights(model_list, \n",
    "                             'All Zeros vs All Ones', \n",
    "                             train_loader,\n",
    "                             valid_loader)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see the accuracy is close to guessing for both zeros and ones, around 10%.\n",
    "\n",
    "The neural network is having a hard time determining which weights need to be changed, since the neurons have the same output for each layer.  To avoid neurons with the same output, let's use unique weights.  We can also randomly select these weights to avoid being stuck in a local minimum for each run.\n",
    "\n",
    "A good solution for getting these random weights is to sample from a uniform distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Uniform Distribution\n",
    "A [uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous%29) has the equal probability of picking any number from a set of numbers. We'll be picking from a continuous distribution, so the chance of picking the same number is low. We'll use NumPy's `np.random.uniform` function to pick random numbers from a uniform distribution.\n",
    "\n",
    ">#### [`np.random_uniform(low=0.0, high=1.0, size=None)`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.uniform.html)\n",
    ">Outputs random values from a uniform distribution.\n",
    "\n",
    ">The generated values follow a uniform distribution in the range [low, high). The lower bound minval is included in the range, while the upper bound maxval is excluded.\n",
    "\n",
    ">- **low:** The lower bound on the range of random values to generate. Defaults to 0.\n",
    "- **high:** The upper bound on the range of random values to generate. Defaults to 1.\n",
    "- **size:** An int or tuple of ints that specify the shape of the output array.\n",
    "\n",
    "We can visualize the uniform distribution by using a histogram. Let's map the values from `np.random_uniform(-3, 3, [1000])` to a histogram using the `helper.hist_dist` function. This will be `1000` random float values from `-3` to `3`, excluding the value `3`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f4375657128>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "helpers.hist_dist('Random Uniform (low=-3, high=3)', np.random.uniform(-3, 3, [1000]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The histogram used 500 buckets for the 1000 values.  Since the chance for any single bucket is the same, there should be around 2 values for each bucket. That's exactly what we see with the histogram.  Some buckets have more and some have less, but they trend around 2.\n",
    "\n",
    "Now that you understand the uniform function, let's use PyTorch's `nn.init` to apply it to a model's initial weights.\n",
    "\n",
    "### Uniform Initialization, Baseline\n",
    "\n",
    "\n",
    "Let's see how well the neural network trains using a uniform weight initialization, where `low=0.0` and `high=1.0`. Below, I'll show you another way (besides in the Net class code) to initialize the weights of a network. To define weights outside of the model definition, you can:\n",
    ">1. Define a function that assigns weights by the type of network layer, *then* \n",
    "2. Apply those weights to an initialized model using `model.apply(fn)`, which applies a function to each model layer.\n",
    "\n",
    "This time, we'll use `weight.data.uniform_` to initialize the weights of our model, directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# takes in a module and applies the specified weight initialization\n",
    "def weights_init_uniform(m):\n",
    "    classname = m.__class__.__name__\n",
    "    # for every Linear layer in a model..\n",
    "    if classname.find('Linear') != -1:\n",
    "        # apply a uniform distribution to the weights and a bias=0\n",
    "        m.weight.data.uniform_(0.0, 1.0)\n",
    "        m.bias.data.fill_(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Net(\n",
       "  (fc1): Linear(in_features=784, out_features=256, bias=True)\n",
       "  (fc2): Linear(in_features=256, out_features=128, bias=True)\n",
       "  (fc3): Linear(in_features=128, out_features=10, bias=True)\n",
       "  (dropout): Dropout(p=0.2)\n",
       ")"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a new model with these weights\n",
    "model_uniform = Net()\n",
    "model_uniform.apply(weights_init_uniform)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f4379327e80>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After 2 Epochs:\n",
      "Validation Accuracy\n",
      "   31.267% -- Uniform Weights\n",
      "Training Loss\n",
      "    4.304  -- Uniform Weights\n"
     ]
    }
   ],
   "source": [
    "# evaluate behavior \n",
    "helpers.compare_init_weights([(model_uniform, 'Uniform Weights')], \n",
    "                             'Uniform Baseline', \n",
    "                             train_loader,\n",
    "                             valid_loader)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "The loss graph is showing the neural network is learning, which it didn't with all zeros or all ones. We're headed in the right direction!\n",
    "\n",
    "## General rule for setting weights\n",
    "The general rule for setting the weights in a neural network is to set them to be close to zero without being too small. \n",
    ">Good practice is to start your weights in the range of $[-y, y]$ where $y=1/\\sqrt{n}$  \n",
    "($n$ is the number of inputs to a given neuron).\n",
    "\n",
    "Let's see if this holds true; let's create a baseline to compare with and center our uniform range over zero by shifting it over by 0.5.  This will give us the range [-0.5, 0.5)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Net(\n",
       "  (fc1): Linear(in_features=784, out_features=256, bias=True)\n",
       "  (fc2): Linear(in_features=256, out_features=128, bias=True)\n",
       "  (fc3): Linear(in_features=128, out_features=10, bias=True)\n",
       "  (dropout): Dropout(p=0.2)\n",
       ")"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# takes in a module and applies the specified weight initialization\n",
    "def weights_init_uniform_center(m):\n",
    "    classname = m.__class__.__name__\n",
    "    # for every Linear layer in a model..\n",
    "    if classname.find('Linear') != -1:\n",
    "        # apply a centered, uniform distribution to the weights\n",
    "        m.weight.data.uniform_(-0.5, 0.5)\n",
    "        m.bias.data.fill_(0)\n",
    "\n",
    "# create a new model with these weights\n",
    "model_centered = Net()\n",
    "model_centered.apply(weights_init_uniform_center)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then let's create a distribution and model that uses the **general rule** for weight initialization; using the range $[-y, y]$, where $y=1/\\sqrt{n}$ .\n",
    "\n",
    "And finally, we'll compare the two models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Net(\n",
       "  (fc1): Linear(in_features=784, out_features=256, bias=True)\n",
       "  (fc2): Linear(in_features=256, out_features=128, bias=True)\n",
       "  (fc3): Linear(in_features=128, out_features=10, bias=True)\n",
       "  (dropout): Dropout(p=0.2)\n",
       ")"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# takes in a module and applies the specified weight initialization\n",
    "def weights_init_uniform_rule(m):\n",
    "    classname = m.__class__.__name__\n",
    "    # for every Linear layer in a model..\n",
    "    if classname.find('Linear') != -1:\n",
    "        # get the number of the inputs\n",
    "        n = m.in_features\n",
    "        y = 1.0/np.sqrt(n)\n",
    "        m.weight.data.uniform_(-y, y)\n",
    "        m.bias.data.fill_(0)\n",
    "\n",
    "# create a new model with these weights\n",
    "model_rule = Net()\n",
    "model_rule.apply(weights_init_uniform_rule)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f43750e5048>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After 2 Epochs:\n",
      "Validation Accuracy\n",
      "   75.125% -- Centered Weights [-0.5, 0.5)\n",
      "   85.242% -- General Rule [-y, y)\n",
      "Training Loss\n",
      "    0.588  -- Centered Weights [-0.5, 0.5)\n",
      "    0.526  -- General Rule [-y, y)\n"
     ]
    }
   ],
   "source": [
    "# compare these two models\n",
    "model_list = [(model_centered, 'Centered Weights [-0.5, 0.5)'), \n",
    "              (model_rule, 'General Rule [-y, y)')]\n",
    "\n",
    "# evaluate behavior \n",
    "helpers.compare_init_weights(model_list, \n",
    "                             '[-0.5, 0.5) vs [-y, y)', \n",
    "                             train_loader,\n",
    "                             valid_loader)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This behavior is really promising! Not only is the loss decreasing, but it seems to do so very quickly for our uniform weights that follow the general rule; after only two epochs we get a fairly high validation accuracy and this should give you some intuition for why starting out with the right initial weights can really help your training process!\n",
    "\n",
    "---\n",
    "\n",
    "Since the uniform distribution has the same chance to pick *any value* in a range, what if we used a distribution that had a higher chance of picking numbers closer to 0?  Let's look at the normal distribution.\n",
    "\n",
    "### Normal Distribution\n",
    "Unlike the uniform distribution, the [normal distribution](https://en.wikipedia.org/wiki/Normal_distribution) has a higher likelihood of picking number close to it's mean. To visualize it, let's plot values from NumPy's `np.random.normal` function to a histogram.\n",
    "\n",
    ">[np.random.normal(loc=0.0, scale=1.0, size=None)](https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.normal.html)\n",
    "\n",
    ">Outputs random values from a normal distribution.\n",
    "\n",
    ">- **loc:** The mean of the normal distribution.\n",
    "- **scale:** The standard deviation of the normal distribution.\n",
    "- **shape:** The shape of the output array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f43750e5198>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "helpers.hist_dist('Random Normal (mean=0.0, stddev=1.0)', np.random.normal(size=[1000]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's compare the normal distribution against the previous, rule-based, uniform distribution.\n",
    "\n",
    "<a id='normalex'></a>\n",
    "#### TODO: Define a weight initialization function that gets weights from a normal distribution \n",
    "> The normal distribution should have a mean of 0 and a standard deviation of $y=1/\\sqrt{n}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "## complete this function\n",
    "def weights_init_normal(m):\n",
    "    '''Takes in a module and initializes all linear layers with weight\n",
    "       values taken from a normal distribution.'''\n",
    "    \n",
    "    classname = m.__class__.__name__\n",
    "    if classname.find('Linear') != -1:\n",
    "        # get the number of the inputs\n",
    "        n = m.in_features\n",
    "        y = (1.0/np.sqrt(n))\n",
    "        m.weight.data.normal_(0, y)\n",
    "        m.bias.data.fill_(0)\n",
    "    # for every Linear layer in a model\n",
    "    # m.weight.data shoud be taken from a normal distribution\n",
    "    # m.bias.data should be 0\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Net(\n",
       "  (fc1): Linear(in_features=784, out_features=256, bias=True)\n",
       "  (fc2): Linear(in_features=256, out_features=128, bias=True)\n",
       "  (fc3): Linear(in_features=128, out_features=10, bias=True)\n",
       "  (dropout): Dropout(p=0.2)\n",
       ")"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## -- no need to change code below this line -- ##\n",
    "\n",
    "# create a new model with the rule-based, uniform weights\n",
    "model_uniform_rule = Net()\n",
    "model_uniform_rule.apply(weights_init_uniform_rule)\n",
    "\n",
    "# create a new model with the rule-based, NORMAL weights\n",
    "model_normal_rule = Net()\n",
    "model_normal_rule.apply(weights_init_normal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f4374fd8c18>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After 2 Epochs:\n",
      "Validation Accuracy\n",
      "   85.433% -- Uniform Rule [-y, y)\n",
      "   84.917% -- Normal Distribution\n",
      "Training Loss\n",
      "    0.421  -- Uniform Rule [-y, y)\n",
      "    0.493  -- Normal Distribution\n"
     ]
    }
   ],
   "source": [
    "# compare the two models\n",
    "model_list = [(model_uniform_rule, 'Uniform Rule [-y, y)'), \n",
    "              (model_normal_rule, 'Normal Distribution')]\n",
    "\n",
    "# evaluate behavior \n",
    "helpers.compare_init_weights(model_list, \n",
    "                             'Uniform vs Normal', \n",
    "                             train_loader,\n",
    "                             valid_loader)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The normal distribution gives us pretty similar behavior compared to the uniform distribution, in this case. This is likely because our network is so small; a larger neural network will pick more weight values from each of these distributions, magnifying the effect of both initialization styles. In general, a normal distribution will result in better performance for a model.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Automatic Initialization\n",
    "\n",
    "Let's quickly take a look at what happens *without any explicit weight initialization*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Instantiate a model with _no_ explicit weight initialization \n",
    "model_no_initialization = Net()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f4375193b38>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After 2 Epochs:\n",
      "Validation Accuracy\n",
      "   85.600% -- No Weights\n",
      "Training Loss\n",
      "    0.281  -- No Weights\n"
     ]
    }
   ],
   "source": [
    "## evaluate the behavior using helpers.compare_init_weights\n",
    "model_list = [(model_no_initialization, 'No Weights')]\n",
    "\n",
    "# evaluate behavior \n",
    "helpers.compare_init_weights(model_list, \n",
    "                             'No Weight Initialization', \n",
    "                             train_loader,\n",
    "                             valid_loader)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you complete this exercise, keep in mind these questions:\n",
    "* What initializaion strategy has the lowest training loss after two epochs? What about highest validation accuracy?\n",
    "* After testing all these initial weight options, which would you decide to use in a final classification model?"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
